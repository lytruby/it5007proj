scalar GraphQLDate

enum StatusType {
  Paid
  Shipped
  Delivered
  Rated
}

type User {
  _id: ID!
  name: String!
  email: String!
  phone: String!
  password: String!
  purchase: Int!
  sell: Int!
}

type Book {
  _id: ID!
  id: Int!
  title: String!
  author: String
  price: Float!
  description: String!
  category: String
  course: String
  photo: String
  sellerid: Int!
}

type Order {
  _id: ID!
  id: Int!
  booktitle: String!
  buyerid: Int! 
  status: StatusType!
  created: GraphQLDate!
}

type Review {
  _id: ID!
  id: Int!
  orderid : Int!
  rate: Int!
  comments: String! 
  created: GraphQLDate!
}

"Inputs"
input UserInputs {
  name: String!
  email: String!
  phone: String!
  password: String!
  purchase: Int!
  sell: Int!
}

input UserCheckInputs {
  email: String!
  password: String!
}

input BookInputs {
  title: String!
  author: String
  price: Float!
  description: String!
  category: String
  course: String
  photo: String
}

input ReviewInputs {
  rating: Int!
  content: String!
  buyerid: Int!
  orderid: Int!
}

input OrderInputs {
  status: StatusType = Paid
  booktitle: String!
  buyerid: Int!
}

##### Top level declarations
type Query {
  about: String!
  bookList: [Book!]!
  userList: [User!]!
  usernum: Int!
  orderList: [Order!]!
  
}

type Mutation {
  setAboutMessage(message: String!): String
  userAdd(user: UserInputs!): String
  userCheck(user: UserCheckInputs!): String
  bookAdd(book: BookInputs!): Book!
  orderAdd(order: OrderInputs!):Order!
  reviewAdd(review: ReviewInputs!): String!
}
